{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","useState","count","setCount","isLoading","duration","Math","random","loading","setLoading","Countdown","Statistic","deadline","Date","now","visible","setVisible","className","onClick","type","icon","SettingOutlined","id","size","title","placement","closable","onClose","href","target","setTimeout","value","format","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOASe,SAASA,EAAIC,GAAQ,IAAD,EAELC,mBAAS,GAFJ,mBAExBC,EAFwB,KAEjBC,EAFiB,OAKDF,mBAAS,CACnCG,WAAW,EACXC,SAA0B,IAAhBC,KAAKC,SAAkB,MAPN,mBAKxBC,EALwB,KAKfC,EALe,KAoBxBC,EAAaC,IAAbD,UACDE,EAAWC,KAAKC,MAAQN,EAAQH,SArBP,EAuBDJ,oBAAS,GAvBR,mBAuBxBc,EAvBwB,KAuBfC,EAvBe,KA4B/B,OACI,sBAAKC,UAAWf,EAAQ,EAAI,MAAQ,wBAApC,UACI,cAAC,IAAD,CAAQgB,QANG,kBAAMF,GAAW,IAMCC,UAAU,WAAWE,KAAK,OAAOC,KAAM,cAACC,EAAA,EAAD,IAAoBC,GAAG,eACnFC,KAAK,UACb,eAAC,IAAD,CACIC,MAAM,UACNC,UAAU,OACVC,UAAU,EACVC,QAXO,kBAAMX,GAAW,IAYxBD,QAASA,EALb,UAOI,kCACI,mFAEJ,yBAAQE,UAAU,iBAAlB,kBAAwC,mBAAGW,KAAK,yCACLC,OAAO,SADV,+BAI5C,6CAAgB3B,EAAhB,YAEA,cAAC,IAAD,CACIgB,QAAS,WAvCjBT,EAAW,2BAAID,GAAL,IAAcJ,WAAW,KACnC0B,YACI,kBAAMrB,EAAW,CACbJ,SAAkC,MAAvBC,KAAKC,SAAW,IAAcL,EAAQ,KACjDE,WAAW,MAEfI,EAAQH,UAmCAF,EAASD,EAAQ,IAErBiB,KAAK,UACLX,QAASA,EAAQJ,UANrB,sBASCI,EAAQJ,UAAY,cAACM,EAAD,CAAWqB,MAAOnB,EAAUoB,OAAO,UAAY,QClEhF,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCEdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SAM5Bb,K","file":"static/js/main.89316d15.chunk.js","sourcesContent":["import './App.css';\nimport 'antd/dist/antd.dark.css';\nimport React, {useState} from \"react\";\nimport {Button, Drawer, Statistic} from \"antd\";\nimport {SettingOutlined} from '@ant-design/icons';\n\n//TODO: make loader\n//TODO: make drawer with language switch\n//https://jsonplaceholder.typicode.com/ fake rest api\nexport default function App(props) {\n\n    const [count, setCount] = useState(0);\n\n\n    const [loading, setLoading] = useState({\n        isLoading: false,\n        duration: Math.random() * 1000 + 1000,\n    });\n    const enterLoading = () => {\n        setLoading({...loading, isLoading: true})\n        setTimeout(\n            () => setLoading({\n                duration: (Math.random() + 0.2) * 1300 * count + 1500,\n                isLoading: false\n            }),\n            loading.duration\n        )\n    }\n\n    const {Countdown} = Statistic;\n    const deadline = Date.now() + loading.duration; // Moment is also OK\n\n    const [visible, setVisible] = useState(false);\n    const showDrawer = () => setVisible(true)\n    const hideDrawer = () => setVisible(false)\n\n\n    return (\n        <div className={count < 2 ? \"App\" : \"App alteredBackground\"}>\n            <Button onClick={showDrawer} className=\"sideMenu\" type=\"text\" icon={<SettingOutlined/>} id=\"drawerButton\"\n                    size=\"large\"/>\n            <Drawer\n                title=\"Clicker\"\n                placement=\"left\"\n                closable={true}\n                onClose={hideDrawer}\n                visible={visible}\n            >\n                <section>\n                    <p>The content will be added soon. Come back later!</p>\n                </section>\n                <footer className=\"sideMenuFooter\">View <a href=\"https://github.com/Ivang316/playground\"\n                                                           target=\"_blank\">source code</a></footer>\n            </Drawer>\n\n            <p>You clicked {count} times</p>\n\n            <Button\n                onClick={() => {\n                    enterLoading();\n                    setCount(count + 1)\n                }}\n                type=\"primary\"\n                loading={loading.isLoading}\n            >Click me</Button>\n\n            {loading.isLoading ? <Countdown value={deadline} format=\"s:SSS\"/> : null}\n\n\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {ConfigProvider} from \"antd\";\nimport ruRU from 'antd/lib/locale/ru_RU'\nimport enUS from 'antd/lib/locale/en_US'\n\nReactDOM.render(\n    <React.StrictMode>\n        <ConfigProvider>\n            <App/>\n        </ConfigProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}