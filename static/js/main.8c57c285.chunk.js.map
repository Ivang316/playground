{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","count","setCount","isLoading","setIsLoading","className","onClick","setTimeout","type","loading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAwEeA,MAtBf,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACJC,EADI,KACGC,EADH,OAGuBF,oBAAS,GAHhC,mBAGJG,EAHI,KAGOC,EAHP,KAUX,OACI,sBAAKC,UAAU,MAAf,UACI,6CAAgBJ,EAAhB,YACA,cAAC,IAAD,CACIK,QAAS,WARjBF,GAAa,GACbG,YAAW,kBAAMH,GAAa,KAAQ,KAOGF,EAASD,EAAQ,IAClDO,KAAK,UACLC,QAASN,EAHb,0BCnDGO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8c57c285.chunk.js","sourcesContent":["import './App.css';\nimport 'antd/dist/antd.dark.css';\nimport React, {useState} from \"react\";\nimport {Button} from \"antd\";\n\n\n/*class App extends React.Component {\n    state = {\n        loadings: [],\n    };\n\n    enterLoading = index => {\n        this.setState(({ loadings }) => {\n            const newLoadings = [...loadings];\n            newLoadings[index] = true;\n\n            return {\n                loadings: newLoadings,\n            };\n        });\n        setTimeout(() => {\n            this.setState(({ loadings }) => {\n                const newLoadings = [...loadings];\n                newLoadings[index] = false;\n\n                return {\n                    loadings: newLoadings,\n                };\n            });\n        }, 6000);\n    };\n\n    render() {\n        const { loadings } = this.state;\n        return (\n            <>\n                <Button\n                    type=\"primary\"\n                    loading={loadings[1]}\n                    onClick={() => this.enterLoading(1)}\n                >\n                    Click me!\n                </Button>\n            </>\n        );\n    }\n}*/\n\n\n//https://jsonplaceholder.typicode.com/ fake rest api\nfunction App() {\n    const [count, setCount] = useState(0);\n\n    const [isLoading, setIsLoading] = useState(false);\n\n    const enterLoading = () => {\n        setIsLoading(true)\n        setTimeout(() => setIsLoading(false), 2000)\n    }\n\n    return (\n        <div className=\"App\">\n            <p>You clicked {count} times</p>\n            <Button\n                onClick={() => { enterLoading(); setCount(count + 1)}}\n                type=\"primary\"\n                loading={isLoading}\n            >Click me</Button>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}